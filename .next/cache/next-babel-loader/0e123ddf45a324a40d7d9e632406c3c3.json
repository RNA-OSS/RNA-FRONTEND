{"ast":null,"code":"import { all, fork, takeLatest, call, put, delay } from \"redux-saga/effects\";\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\nimport Axios from \"axios\";\n\nfunction loginAPI() {} // Axios.post(\"/login\");\n//비동기 처리하는 부분\n\n\nfunction* login() {\n  try {\n    // yield call(loginAPI); //비동기 처리\n    yield put({\n      type: LOGIN_SUCCESS //성공하면 이 상태를 처리\n\n    });\n  } catch (err) {\n    //실패시 이 상태를 처리\n    console.error(err);\n    yield put({\n      type: LOGIN_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOGIN_REQUEST, login); //첫번 째 인자 값이 dispatch될 때 두 번째 인자 함수를 실행\n}\n\nfunction logoutAPI() {} // Axios.post(\"/logout\");\n//비동기 처리하는 부분\n\n\nfunction* logout() {\n  try {\n    yield put({\n      type: LOGOUT_SUCCESS //성공하면 이 상태를 처리\n\n    });\n  } catch (err) {\n    //실패시 이 상태를 처리\n    console.error(err);\n    yield put({\n      type: LOGOUT_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOGOUT_REQUEST, logout); //첫번 째 인자 값이 dispatch될 때 두 번째 인자 함수를 실행\n}\n\nfunction signUpAPI() {\n  Axios.post(\"/singUp\");\n} //비동기 처리하는 부분\n\n\nfunction* signUp() {\n  try {\n    yield delay(1000); //비동기 처리\n\n    yield put({\n      type: SIGN_UP_SUCCESS //성공하면 이 상태를 처리\n\n    });\n  } catch (err) {\n    //실패시 이 상태를 처리\n    console.error(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); //첫번 째 인자 값이 dispatch될 때 두 번째 인자 함수를 실행\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/jojaegwon/Desktop/RNA Project/front/sagas/user.js"],"names":["all","fork","takeLatest","call","put","delay","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","Axios","loginAPI","login","type","err","console","error","watchLogin","logoutAPI","logout","watchLogout","signUpAPI","post","signUp","e","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,EAA2CC,KAA3C,QAAwD,oBAAxD;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,cAJF,EAKEC,cALF,EAMEC,cANF,EAOEC,eAPF,EAQEC,eARF,EASEC,eATF,QAUO,kBAVP;AAWA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAoB,CAEnB,CAFD,CACE;AACA;;;AAEF,UAAUC,KAAV,GAAkB;AAChB,MAAI;AACF;AACA,UAAMb,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAEX,aADE,CACa;;AADb,KAAD,CAAT;AAGD,GALD,CAKE,OAAOY,GAAP,EAAY;AACZ;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMf,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAEV,aADE;AAERa,MAAAA,KAAK,EAAEF;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUG,UAAV,GAAuB;AACrB,QAAMpB,UAAU,CAACI,aAAD,EAAgBW,KAAhB,CAAhB,CADqB,CACmB;AACzC;;AAED,SAASM,SAAT,GAAqB,CAEpB,CAFD,CACE;AACA;;;AAEF,UAAUC,MAAV,GAAmB;AACjB,MAAI;AACF,UAAMpB,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAER,cADE,CACc;;AADd,KAAD,CAAT;AAGD,GAJD,CAIE,OAAOS,GAAP,EAAY;AACZ;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMf,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAEP,cADE;AAERU,MAAAA,KAAK,EAAEF;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUM,WAAV,GAAwB;AACtB,QAAMvB,UAAU,CAACO,cAAD,EAAiBe,MAAjB,CAAhB,CADsB,CACoB;AAC3C;;AAED,SAASE,SAAT,GAAqB;AACnBX,EAAAA,KAAK,CAACY,IAAN,CAAW,SAAX;AACD,C,CAAC;;;AAEF,UAAUC,MAAV,GAAmB;AACjB,MAAI;AACF,UAAMvB,KAAK,CAAC,IAAD,CAAX,CADE,CACiB;;AACnB,UAAMD,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAEL,eADE,CACe;;AADf,KAAD,CAAT;AAGD,GALD,CAKE,OAAOM,GAAP,EAAY;AACZ;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMf,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAEJ,eADE;AAERO,MAAAA,KAAK,EAAEQ;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUC,WAAV,GAAwB;AACtB,QAAM5B,UAAU,CAACU,eAAD,EAAkBgB,MAAlB,CAAhB,CADsB,CACqB;AAC5C;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAM/B,GAAG,CAAC,CAACC,IAAI,CAACqB,UAAD,CAAL,EAAmBrB,IAAI,CAACwB,WAAD,CAAvB,EAAsCxB,IAAI,CAAC6B,WAAD,CAA1C,CAAD,CAAT;AACD","sourcesContent":["import { all, fork, takeLatest, call, put, delay } from \"redux-saga/effects\";\nimport {\n  LOGIN_REQUEST,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE,\n  LOGOUT_REQUEST,\n  LOGOUT_SUCCESS,\n  LOGOUT_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAILURE,\n} from \"../reducers/user\";\nimport Axios from \"axios\";\n\nfunction loginAPI() {\n  // Axios.post(\"/login\");\n} //비동기 처리하는 부분\n\nfunction* login() {\n  try {\n    // yield call(loginAPI); //비동기 처리\n    yield put({\n      type: LOGIN_SUCCESS, //성공하면 이 상태를 처리\n    });\n  } catch (err) {\n    //실패시 이 상태를 처리\n    console.error(err);\n    yield put({\n      type: LOGIN_FAILURE,\n      error: err,\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOGIN_REQUEST, login); //첫번 째 인자 값이 dispatch될 때 두 번째 인자 함수를 실행\n}\n\nfunction logoutAPI() {\n  // Axios.post(\"/logout\");\n} //비동기 처리하는 부분\n\nfunction* logout() {\n  try {\n    yield put({\n      type: LOGOUT_SUCCESS, //성공하면 이 상태를 처리\n    });\n  } catch (err) {\n    //실패시 이 상태를 처리\n    console.error(err);\n    yield put({\n      type: LOGOUT_FAILURE,\n      error: err,\n    });\n  }\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOGOUT_REQUEST, logout); //첫번 째 인자 값이 dispatch될 때 두 번째 인자 함수를 실행\n}\n\nfunction signUpAPI() {\n  Axios.post(\"/singUp\");\n} //비동기 처리하는 부분\n\nfunction* signUp() {\n  try {\n    yield delay(1000); //비동기 처리\n    yield put({\n      type: SIGN_UP_SUCCESS, //성공하면 이 상태를 처리\n    });\n  } catch (err) {\n    //실패시 이 상태를 처리\n    console.error(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); //첫번 째 인자 값이 dispatch될 때 두 번째 인자 함수를 실행\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignUp)]);\n}\n"]},"metadata":{},"sourceType":"module"}