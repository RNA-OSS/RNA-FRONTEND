{"ast":null,"code":"import { all, takeLatest, put, fork, delay } from \"redux-saga/effects\";\nimport { LOAD_POST_LISTS_REQUEST, LOAD_POST_LISTS_SUCCESS, LOAD_POST_LISTS_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\nimport Axios from \"axios\";\n\nfunction addPostAPI() {}\n\nfunction* addPost(action) {\n  try {\n    yield put({\n      type: ADD_POST_SUCCESS,\n      newPost: action.newPost\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction addCommentAPI() {}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data.postId\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* loadPost(action) {\n  try {\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      id: action.postId\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* loadPostLists(action) {\n  try {\n    yield put({\n      type: LOAD_POST_LISTS_SUCCESS\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: LOAD_POST_LISTS_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchLoadPostLists() {\n  yield takeLatest(LOAD_POST_LISTS_REQUEST, loadPostLists);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPostLists), fork(watchLoadPost), fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/jojaegwon/Desktop/RNA Project/front/sagas/post.js"],"names":["all","takeLatest","put","fork","delay","LOAD_POST_LISTS_REQUEST","LOAD_POST_LISTS_SUCCESS","LOAD_POST_LISTS_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","Axios","addPostAPI","addPost","action","type","newPost","err","console","log","error","watchAddPost","addCommentAPI","addComment","data","postId","watchAddComment","loadPost","id","watchLoadPost","loadPostLists","watchLoadPostLists","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,KAArC,QAAkD,oBAAlD;AACA,SACEC,uBADF,EAEEC,uBAFF,EAGEC,uBAHF,EAIEC,iBAJF,EAKEC,iBALF,EAMEC,iBANF,EAOEC,gBAPF,EAQEC,gBARF,EASEC,gBATF,EAUEC,mBAVF,EAWEC,mBAXF,EAYEC,mBAZF,QAaO,kBAbP;AAcA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,GAAsB,CAAE;;AAExB,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF,UAAMlB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAET,gBADE;AAERU,MAAAA,OAAO,EAAEF,MAAM,CAACE;AAFR,KAAD,CAAT;AAID,GALD,CAKE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,UAAMrB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAER,gBADE;AAERa,MAAAA,KAAK,EAAEH;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUI,YAAV,GAAyB;AACvB,QAAM1B,UAAU,CAACU,gBAAD,EAAmBQ,OAAnB,CAAhB;AACD;;AAED,SAASS,aAAT,GAAyB,CAAE;;AAE3B,UAAUC,UAAV,CAAqBT,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEN,mBADE;AAERe,MAAAA,IAAI,EAAEV,MAAM,CAACU,IAAP,CAAYC;AAFV,KAAD,CAAT;AAID,GAND,CAME,OAAOR,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,UAAMrB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEL,mBADE;AAERU,MAAAA,KAAK,EAAEH;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUS,eAAV,GAA4B;AAC1B,QAAM/B,UAAU,CAACa,mBAAD,EAAsBe,UAAtB,CAAhB;AACD;;AAED,UAAUI,QAAV,CAAmBb,MAAnB,EAA2B;AACzB,MAAI;AACF,UAAMlB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEZ,iBADE;AAERyB,MAAAA,EAAE,EAAEd,MAAM,CAACW;AAFH,KAAD,CAAT;AAID,GALD,CAKE,OAAOR,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,UAAMrB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEX,iBADE;AAERgB,MAAAA,KAAK,EAAEH;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUY,aAAV,GAA0B;AACxB,QAAMlC,UAAU,CAACO,iBAAD,EAAoByB,QAApB,CAAhB;AACD;;AAED,UAAUG,aAAV,CAAwBhB,MAAxB,EAAgC;AAC9B,MAAI;AACF,UAAMlB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEf;AADE,KAAD,CAAT;AAGD,GAJD,CAIE,OAAOiB,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,UAAMrB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEd,uBADE;AAERmB,MAAAA,KAAK,EAAEH;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUc,kBAAV,GAA+B;AAC7B,QAAMpC,UAAU,CAACI,uBAAD,EAA0B+B,aAA1B,CAAhB;AACD;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAClC,QAAMtC,GAAG,CAAC,CACRG,IAAI,CAACkC,kBAAD,CADI,EAERlC,IAAI,CAACgC,aAAD,CAFI,EAGRhC,IAAI,CAACwB,YAAD,CAHI,EAIRxB,IAAI,CAAC6B,eAAD,CAJI,CAAD,CAAT;AAMD","sourcesContent":["import { all, takeLatest, put, fork, delay } from \"redux-saga/effects\";\nimport {\n  LOAD_POST_LISTS_REQUEST,\n  LOAD_POST_LISTS_SUCCESS,\n  LOAD_POST_LISTS_FAILURE,\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n} from \"../reducers/post\";\nimport Axios from \"axios\";\n\nfunction addPostAPI() {}\n\nfunction* addPost(action) {\n  try {\n    yield put({\n      type: ADD_POST_SUCCESS,\n      newPost: action.newPost,\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction addCommentAPI() {}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data.postId,\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err,\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* loadPost(action) {\n  try {\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      id: action.postId,\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err,\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* loadPostLists(action) {\n  try {\n    yield put({\n      type: LOAD_POST_LISTS_SUCCESS,\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: LOAD_POST_LISTS_FAILURE,\n      error: err,\n    });\n  }\n}\n\nfunction* watchLoadPostLists() {\n  yield takeLatest(LOAD_POST_LISTS_REQUEST, loadPostLists);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchLoadPostLists),\n    fork(watchLoadPost),\n    fork(watchAddPost),\n    fork(watchAddComment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}