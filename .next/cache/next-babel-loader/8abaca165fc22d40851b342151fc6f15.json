{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jojaegwon/Desktop/RNA Project/front/components/organisms/Comment/index.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport propTypes from \"prop-types\";\nimport * as Styled from \"./style\";\nimport SingleComment from \"../SingleComment\";\nimport Border from \"../../molecules/Border\";\nimport Box, { BoxSort, BoxDirection } from \"../../molecules/Box\";\nimport Span, { SpanWeight, SpanColor } from \"../../atoms/Span\";\nimport TextArea from \"../../atoms/TextArea\";\nimport Button, { ButtonColor, ButtonFontSize } from \"../../atoms/Button\";\nimport useInput from \"../../../hooks/useInput\";\n\nvar Comment = function Comment(_ref) {\n  _s();\n\n  var commentLists = _ref.commentLists;\n\n  var _useInput = useInput(\"\"),\n      _useInput2 = _slicedToArray(_useInput, 2),\n      contents = _useInput2[0],\n      onChangeContents = _useInput2[1];\n\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, commentLists && commentLists.map(function (comment) {\n    return __jsx(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }\n    }, __jsx(Border, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }\n    }), __jsx(SingleComment, {\n      comment: comment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    }));\n  }), __jsx(Styled.CommentContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    sort: BoxSort.CENTER_SPACE_BETWEEN,\n    mar: [0, 0, 1, 0],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, __jsx(Span, {\n    weight: SpanWeight.L,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }, \"\\uD638\\uD638\\uD638\\uC7BC\\uB204\\uCFE4\"), __jsx(Span, {\n    color: SpanColor.GRAY,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, contents.length, \"/1000\")), __jsx(Box, {\n    direction: BoxDirection.ROW,\n    sort: BoxSort.BOTTOM_SPACE_BETWEEN,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, __jsx(\"form\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, __jsx(TextArea, {\n    id: \"input-comment\",\n    value: contents,\n    onChange: onChangeContents,\n    height: \"60px\",\n    required: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    width: \"50px\",\n    height: \"34px\",\n    fontSize: ButtonFontSize.S,\n    fontColor: ButtonColor.MAIN,\n    backgroundColor: ButtonColor.LIGHT_MAIN,\n    shadow: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, \"\\uB4F1\\uB85D\")))));\n};\n\n_s(Comment, \"RPVgrwfHuuINNrsX188siYXOB4Y=\", false, function () {\n  return [useInput];\n});\n\n_c = Comment;\nComment.propTypes = {\n  commentLists: propTypes.array\n};\nexport default Comment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"sources":["/Users/jojaegwon/Desktop/RNA Project/front/components/organisms/Comment/index.jsx"],"names":["React","propTypes","Styled","SingleComment","Border","Box","BoxSort","BoxDirection","Span","SpanWeight","SpanColor","TextArea","Button","ButtonColor","ButtonFontSize","useInput","Comment","commentLists","contents","onChangeContents","map","comment","CENTER_SPACE_BETWEEN","L","GRAY","length","ROW","BOTTOM_SPACE_BETWEEN","S","MAIN","LIGHT_MAIN","array"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,KAAKC,MAAZ,MAAwB,SAAxB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,GAAP,IAAcC,OAAd,EAAuBC,YAAvB,QAA2C,qBAA3C;AACA,OAAOC,IAAP,IAAeC,UAAf,EAA2BC,SAA3B,QAA4C,kBAA5C;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,MAAP,IAAiBC,WAAjB,EAA8BC,cAA9B,QAAoD,oBAApD;AACA,OAAOC,QAAP,MAAqB,yBAArB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAsB;AAAA;;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AAAA,kBACCF,QAAQ,CAAC,EAAD,CADT;AAAA;AAAA,MAC7BG,QAD6B;AAAA,MACnBC,gBADmB;;AAGpC,SACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,YAAY,IACXA,YAAY,CAACG,GAAb,CAAiB,UAACC,OAAD;AAAA,WACf,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,aAAD;AAAe,MAAA,OAAO,EAAEA,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADe;AAAA,GAAjB,CAFJ,EASE,MAAC,MAAD,CAAQ,gBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,IAAI,EAAEf,OAAO,CAACgB,oBAAnB;AAAyC,IAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,MAAM,EAAEb,UAAU,CAACc,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADF,EAEE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEb,SAAS,CAACc,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BN,QAAQ,CAACO,MAAvC,UAFF,CADF,EAKE,MAAC,GAAD;AAAK,IAAA,SAAS,EAAElB,YAAY,CAACmB,GAA7B;AAAkC,IAAA,IAAI,EAAEpB,OAAO,CAACqB,oBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AACE,IAAA,EAAE,EAAC,eADL;AAEE,IAAA,KAAK,EAAET,QAFT;AAGE,IAAA,QAAQ,EAAEC,gBAHZ;AAIE,IAAA,MAAM,EAAC,MAJT;AAKE,IAAA,QAAQ,MALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE,MAAC,MAAD;AACE,IAAA,KAAK,EAAC,MADR;AAEE,IAAA,MAAM,EAAC,MAFT;AAGE,IAAA,QAAQ,EAAEL,cAAc,CAACc,CAH3B;AAIE,IAAA,SAAS,EAAEf,WAAW,CAACgB,IAJzB;AAKE,IAAA,eAAe,EAAEhB,WAAW,CAACiB,UAL/B;AAME,IAAA,MAAM,EAAE,IANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARF,CADF,CALF,CATF,CADF;AAuCD,CA1CD;;GAAMd,O;UACiCD,Q;;;KADjCC,O;AA4CNA,OAAO,CAACf,SAAR,GAAoB;AAClBgB,EAAAA,YAAY,EAAEhB,SAAS,CAAC8B;AADN,CAApB;AAIA,eAAef,OAAf","sourcesContent":["import React from \"react\";\nimport propTypes from \"prop-types\";\n\nimport * as Styled from \"./style\";\nimport SingleComment from \"../SingleComment\";\nimport Border from \"../../molecules/Border\";\nimport Box, { BoxSort, BoxDirection } from \"../../molecules/Box\";\nimport Span, { SpanWeight, SpanColor } from \"../../atoms/Span\";\nimport TextArea from \"../../atoms/TextArea\";\nimport Button, { ButtonColor, ButtonFontSize } from \"../../atoms/Button\";\nimport useInput from \"../../../hooks/useInput\";\n\nconst Comment = ({ commentLists }) => {\n  const [contents, onChangeContents] = useInput(\"\");\n\n  return (\n    <React.Fragment>\n      {commentLists &&\n        commentLists.map((comment) => (\n          <React.Fragment>\n            <Border />\n            <SingleComment comment={comment} />\n          </React.Fragment>\n        ))}\n\n      <Styled.CommentContainer>\n        <Box sort={BoxSort.CENTER_SPACE_BETWEEN} mar={[0, 0, 1, 0]}>\n          <Span weight={SpanWeight.L}>호호호잼누쿤</Span>\n          <Span color={SpanColor.GRAY}>{contents.length}/1000</Span>\n        </Box>\n        <Box direction={BoxDirection.ROW} sort={BoxSort.BOTTOM_SPACE_BETWEEN}>\n          <form>\n            <TextArea\n              id=\"input-comment\"\n              value={contents}\n              onChange={onChangeContents}\n              height=\"60px\"\n              required\n            />\n            <Button\n              width=\"50px\"\n              height=\"34px\"\n              fontSize={ButtonFontSize.S}\n              fontColor={ButtonColor.MAIN}\n              backgroundColor={ButtonColor.LIGHT_MAIN}\n              shadow={true}\n            >\n              등록\n            </Button>\n          </form>\n        </Box>\n      </Styled.CommentContainer>\n    </React.Fragment>\n  );\n};\n\nComment.propTypes = {\n  commentLists: propTypes.array,\n};\n\nexport default Comment;\n"]},"metadata":{},"sourceType":"module"}