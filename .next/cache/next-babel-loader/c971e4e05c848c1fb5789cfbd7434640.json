{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(loadPostLists),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPostLists),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, takeLatest, put, fork, delay } from \"redux-saga/effects\";\nimport { LOAD_POST_LISTS_REQUEST, LOAD_POST_LISTS_SUCCESS, LOAD_POST_LISTS_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\nimport Axios from \"axios\";\n\nfunction addPostAPI() {}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: ADD_POST_SUCCESS,\n            newPost: action.newPost\n          });\n\n        case 3:\n          _context.next = 10;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 10;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 5]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI() {}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          console.log(action.commentData);\n          _context3.next = 4;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.commentData\n          });\n\n        case 4:\n          _context3.next = 11;\n          break;\n\n        case 6:\n          _context3.prev = 6;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 6]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadPost(action) {\n  return _regeneratorRuntime.wrap(function loadPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            id: action.postId\n          });\n\n        case 5:\n          _context5.next = 12;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.log(_context5.t0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 7]]);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadPostLists(action) {\n  return _regeneratorRuntime.wrap(function loadPostLists$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return put({\n            type: LOAD_POST_LISTS_SUCCESS\n          });\n\n        case 3:\n          _context7.next = 10;\n          break;\n\n        case 5:\n          _context7.prev = 5;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.log(_context7.t0);\n          _context7.next = 10;\n          return put({\n            type: LOAD_POST_LISTS_FAILURE,\n            error: _context7.t0\n          });\n\n        case 10:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 5]]);\n}\n\nfunction watchLoadPostLists() {\n  return _regeneratorRuntime.wrap(function watchLoadPostLists$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_POST_LISTS_REQUEST, loadPostLists);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLoadPostLists), fork(watchLoadPost), fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["/Users/jojaegwon/Desktop/RNA Project/front/sagas/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","loadPost","watchLoadPost","loadPostLists","watchLoadPostLists","postSaga","all","takeLatest","put","fork","delay","LOAD_POST_LISTS_REQUEST","LOAD_POST_LISTS_SUCCESS","LOAD_POST_LISTS_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","Axios","addPostAPI","action","type","newPost","console","log","error","addCommentAPI","commentData","data","id","postId"],"mappings":"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","sourcesContent":["import { all, takeLatest, put, fork, delay } from \"redux-saga/effects\";\nimport {\n  LOAD_POST_LISTS_REQUEST,\n  LOAD_POST_LISTS_SUCCESS,\n  LOAD_POST_LISTS_FAILURE,\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n} from \"../reducers/post\";\nimport Axios from \"axios\";\n\nfunction addPostAPI() {}\n\nfunction* addPost(action) {\n  try {\n    yield put({\n      type: ADD_POST_SUCCESS,\n      newPost: action.newPost,\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction addCommentAPI() {}\n\nfunction* addComment(action) {\n  try {\n    console.log(action.commentData);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.commentData,\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err,\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* loadPost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      id: action.postId,\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err,\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* loadPostLists(action) {\n  try {\n    yield put({\n      type: LOAD_POST_LISTS_SUCCESS,\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: LOAD_POST_LISTS_FAILURE,\n      error: err,\n    });\n  }\n}\n\nfunction* watchLoadPostLists() {\n  yield takeLatest(LOAD_POST_LISTS_REQUEST, loadPostLists);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchLoadPostLists),\n    fork(watchLoadPost),\n    fork(watchAddPost),\n    fork(watchAddComment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}