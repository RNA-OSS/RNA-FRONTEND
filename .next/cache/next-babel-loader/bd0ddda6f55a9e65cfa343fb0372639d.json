{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogout),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, call, put, delay } from \"redux-saga/effects\";\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\nimport Axios from \"axios\";\n\nfunction loginAPI() {} // Axios.post(\"/login\");\n//비동기 처리하는 부분\n\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: LOGIN_SUCCESS //성공하면 이 상태를 처리\n\n          });\n\n        case 3:\n          _context.next = 10;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          //실패시 이 상태를 처리\n          console.error(_context.t0);\n          _context.next = 10;\n          return put({\n            type: LOGIN_FAILURE,\n            error: _context.t0\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 5]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOGIN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction logoutAPI() {} // Axios.post(\"/logout\");\n//비동기 처리하는 부분\n\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return put({\n            type: LOGOUT_SUCCESS //성공하면 이 상태를 처리\n\n          });\n\n        case 3:\n          _context3.next = 10;\n          break;\n\n        case 5:\n          _context3.prev = 5;\n          _context3.t0 = _context3[\"catch\"](0);\n          //실패시 이 상태를 처리\n          console.error(_context3.t0);\n          _context3.next = 10;\n          return put({\n            type: LOGOUT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 5]]);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOGOUT_REQUEST, logout);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction signUpAPI() {\n  Axios.post(\"/singUp\");\n} //비동기 처리하는 부분\n\n\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS //성공하면 이 상태를 처리\n\n          });\n\n        case 5:\n          _context5.next = 12;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          //실패시 이 상태를 처리\n          console.error(_context5.t0);\n          _context5.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: e\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogin), fork(watchLogout), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/Users/jojaegwon/Desktop/RNA Project/front/sagas/user.js"],"names":["login","watchLogin","logout","watchLogout","signUp","watchSignUp","userSaga","all","fork","takeLatest","call","put","delay","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","Axios","loginAPI","type","console","error","logoutAPI","signUpAPI","post","e"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, call, put, delay } from \"redux-saga/effects\";\nimport {\n  LOGIN_REQUEST,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE,\n  LOGOUT_REQUEST,\n  LOGOUT_SUCCESS,\n  LOGOUT_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAILURE,\n} from \"../reducers/user\";\nimport Axios from \"axios\";\n\nfunction loginAPI() {\n  // Axios.post(\"/login\");\n} //비동기 처리하는 부분\n\nfunction* login() {\n  try {\n    // yield call(loginAPI); //비동기 처리\n    yield put({\n      type: LOGIN_SUCCESS, //성공하면 이 상태를 처리\n    });\n  } catch (err) {\n    //실패시 이 상태를 처리\n    console.error(err);\n    yield put({\n      type: LOGIN_FAILURE,\n      error: err,\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOGIN_REQUEST, login); //첫번 째 인자 값이 dispatch될 때 두 번째 인자 함수를 실행\n}\n\nfunction logoutAPI() {\n  // Axios.post(\"/logout\");\n} //비동기 처리하는 부분\n\nfunction* logout() {\n  try {\n    yield put({\n      type: LOGOUT_SUCCESS, //성공하면 이 상태를 처리\n    });\n  } catch (err) {\n    //실패시 이 상태를 처리\n    console.error(err);\n    yield put({\n      type: LOGOUT_FAILURE,\n      error: err,\n    });\n  }\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOGOUT_REQUEST, logout); //첫번 째 인자 값이 dispatch될 때 두 번째 인자 함수를 실행\n}\n\nfunction signUpAPI() {\n  Axios.post(\"/singUp\");\n} //비동기 처리하는 부분\n\nfunction* signUp() {\n  try {\n    yield delay(1000); //비동기 처리\n    yield put({\n      type: SIGN_UP_SUCCESS, //성공하면 이 상태를 처리\n    });\n  } catch (err) {\n    //실패시 이 상태를 처리\n    console.error(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); //첫번 째 인자 값이 dispatch될 때 두 번째 인자 함수를 실행\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignUp)]);\n}\n"]},"metadata":{},"sourceType":"module"}